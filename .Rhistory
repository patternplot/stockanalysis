t.test(g2,g1, paired=TRUE, var.equal = TRUE)$conf
t.test(g2,g1, paired=TRUE)$conf
(15.34/8 + 18.23/21)^2
(15.34^2/8 + 18.23^2/21)^2
num <- (15.34^2/8 + 18.23^2/21)^2
den <- ((15.34^2/8)^2)/7 + ((18.23^2/21)^2)/20
mydf <- num/den
132.86-127.44+c(-1,1)*qt(.975,mydf)*sqrt(sqrt(num))
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
library(swirl)
swirl()
10/sqrt(32)
s
10/sqrt(100)
2
2/(10/4)
15
qt(.95,15)
View(fs)
View(fs)
View(fs)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
View(fs)
mybin
3
9
8
pt(q=2.5, df=15, lower.tail=FALSE)
qnorm(0.975,lower.tail=FALSE)
qnorm(0.95)
qnorm(0.99)
pnorm(2)
pnorm(2, lower.tail=FALSE)
mybin
pbinom(6, size=8, prob=.5,lower.tail=FALSE)
pbinom(7, size=8, prob=.5)
ppois(9,5, lower.tail=FALSE)
?t.test
t.test(9, mu=1100)
?qt
qt(0.975,8)
1100 + c(-1, 1) * qt(.975, 9 - 1) * 30 / sqrt(9)
?matric
?matrix
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z, mean=30,lower.tail = FALSE)
pnorm(30+z, mean=32,lower.tail = FALSE)
pnorm(30+z, mean=32,sd=1,lower.tail = FALSE)
pnorm(30+z, mean=32,sd=2,lower.tail = FALSE)
pnorm(30+z*2, mean=32,sd=2,lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pvalues)
head(pValues)
sum(pValues < .05)
sdvd
sum(p.adjust < .05, method="benferroni")
sum(pValues.adjust < .05, method="benferroni")
sum(p.adjust(pvalues) < .05, method="benferroni")
sum(p.adjust(pValues) < .05, method="benferroni")
sum(1)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2<.05, trueStatus)
24/476
24/500
table(p.adjust(pValues2, method="bonferroni") <.05, trueStatus)
table(p.adjust(pValues2, method="BH") <.05, trueStatus)
data(ToothGrowth)
aggregate(len~supp, FUN=mean)
?aggregate
aggregate(len~supp,ToothGrowth, FUN=mean)
library(ggplot2)
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp))+
xlab("Supplement type") +ylab("Tooth length")
aggregate(len~dose,ToothGrowth, FUN=mean)
?aggregate
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose))+
xlab("Dose") +ylab("Tooth length")
ToothGrowth$dose<-as.factor(ToothGrowth$dose)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose))+
xlab("Dose") +ylab("Tooth length")
t.test(len[supp=="OJ"], len[supp=="VC"], paired = FALSE, var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$supp=="OJ"], ToothGrowth$len[ToothGrowth$supp=="VC"], paired = FALSE, var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$dose==2], ToothGrowth$len[ToothGrowth$dose==1], paired = FALSE, var.equal = FALSE)
library(pdflatex)
load(pdflatex)
install.packages(pdflatex)
install.packages("UsingR")
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3,
| col='red')
abline(regrline, lwd=3,col='red')
summary(regrline)
library(swirl)
swirl()
lm(chils ~ parent, galton)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
rhs-lhs
lhs - rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes(fit$residuals)
varRes <- var(fit$residuals)
varEst <- est(ols.slope,ols.ic)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild, sum(varRes,varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
library(swirl)
swirl()
fit <- lm(child ~ parent, dataset="galton")
fit <- lm(child ~ parent, dataset=galton)
fit <- lm(child ~ parent, dataset=Galton)
fit <- lm(child ~ parent, Galton)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals)/926)
sqrt(sum(fit$residuals^2)/926)
sqrt(sum(fit$residuals)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(galton$child)
sRes <- deviance(fit)
1 - (sRes/STot)
1 - (sRes/sTot)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$parent, galton$child)
cor(galton$parent, galton$child)^2
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
Constant
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1,
| trees2)
fit2 <- lm(Volume ~ Height + Constant -1,trees2)
lapply(list(fit, fit2), coef)
library(swirl)
swirl()
lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination ~ Education, swiss)
cor(Examination~Education, swiss)
cor(lm(Examination ~ Education, swiss)
)
cor(lm(Examination ~ Education, swiss))
cor()
cor(0)
x <- 1
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms
makelms()
ec <- sum(swiss$Examination,swiss$Catholic)
ec
ec <- swiss$Examination+swiss$Catholic
ec
efit <- lm(Fertility ~ . + ec, swiss)
print
all$coefficients-efit$coefficients
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSparys,15)
head(InsectSprays,15)
A
sA
summary(sA[,2])
summary(InsectSprays[,2])
sapply(cols(InsectSprays), class)
sapply(col(InsectSprays), class)
sapply(InsectSprays,class)
lm(count ~ spray, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,C)
spray2 <- relevel(InsectSprays$spray,C)
x < 2
x <- 2
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray,spray2)
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[3]
fit$coef[2]
fit$coef
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
fit$corf
fit$coef
summary(fit)$coef
lmF <- lm(hunger[hunger$Sex=="Female"] ~ Year, hunger)
lmF <- lm(Numeric$Sex=="Female"] ~ Year, hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year, hunger)
lmF <- lm(Numeric ~ Year, hunger[$Sex=="Female"])
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female"])
x <- 3
lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex,hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year,hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
x <- 4
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
out2
dy <- predict(fitno, out2)-predict(fit, out2)
x
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficient
?mtcars
head(mtcars)
library(swirl)
swirl()
rgp()
rgp1()
rgp2()
head(swiss)
fdf
x <- 2
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss )
fit3 <- lm(Fertility ~ Examination + Education, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
x < 2
d <- deviance(fit3)/43
n <- deviance(fit1)-deviance(fit3)
info()
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
library(AppliedPredictiveModeling)
required(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(segmentationOriginal)
head(segmentationOriginal)
summary(segmentationOriginal)
set.seed(125)
inTrain <- data$Case == "Train"
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
install.packages("e1071")
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
install.packages("rattle")
library(rattle)
library(rattle)
library(rpart.plot)
install.packages("rpart/plot")
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages('randomforest')
install.packages('randomForest')
install.packages(c("BH", "boot", "cluster", "crayon", "curl", "DBI", "devtools", "dplyr", "evaluate", "fields", "formatR", "ggplot2", "git2r", "gtable", "highr", "Hmisc", "htmltools", "httr", "jsonlite", "knitr", "lazyeval", "lubridate", "Matrix", "mgcv", "nnet", "openssl", "packrat", "plyr", "Rcpp", "RCurl", "rmarkdown", "rsconnect", "rstudioapi", "scales", "stringi", "survival", "swirl", "testthat", "tidyr", "TTR", "withr", "XML", "zoo"))
install.packages("installr")
installr::updateR()
installr::updateR()
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
?read.csv
?nearZeroVar
??nearZeroVar
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
library(caret)
library(rattle)
install.packages("rattle")
library(rattle)
install.packages("quantmod")
library(quantmod)
getSymbols('BAC',src='Yahoo')
getSymbols('BAC',src='yahoo')
BAC
View(BAC)
plot(BAC)
install.packages('TTR')
install.packages('TTR')
library(TTR)
library(quantmod)
open_price_day_trade_analysis <- function(tkrsym, frdate, todate,long.threshold, short.threshold,loss.limit,profit.preserve )
{
# Get extra 1 year prior data to help in calculating moving averages etc.
data.frdate <<- as.Date(frdate) - 200
stockData <- new.env()
getSymbols(tkrsym, env= stockData, src='yahoo',from = data.frdate, to = todate)
stkHist <<- data.frame(as.xts(stockData[[tkrsym]]))
stkHist <<- merge(stkHist, data.frame(ClOp(stockData[[tkrsym]])), by.x = 0, by.y = 0, all = T)
# Make Column Names generic for later calls
colnames(stkHist) <<- sub(paste0(tkrsym,"."), "Stock.", colnames(stkHist))
colnames(stkHist)[ncol(stkHist)] <<- "Stock.ClOp"
stkHist$Stock.ShortTerm.MA <<- EMA(stkHist$Stock.Close, n=5)
stkHist$Stock.LongTerm.MA  <<- EMA(stkHist$Stock.Close, n=10)
stkHist$Stock.SD  <<- runSD(log(stkHist$Stock.Close), n=3)
stkHist <<- stkHist[-which(as.character.Date(stkHist$Row.names) < frdate),]
stkHist$TRADE[1] <<- "NO TRADE"
stkHist$trend.factor[1] <<- 0
stkHist$PERCENT.RETURN[1] <<- 0
stkHist$PERCENT.RETURN[1] <<- 0
# stkHist$TRADE[2] <<- "NO TRADE"
# stkHist$trend.factor[2] <<- 0
# stkHist$PERCENT.RETURN[2] <<- 0
for(i in 2:nrow(stkHist))
{
# stkHist$trend.factor[i] <<- (stkHist$Stock.Close[i] - stkHist$Stock.ShortTerm.MA[i])*10/stkHist$Stock.Close[i]
#  stkHist$trend.factor[i] <<- (stkHist$Stock.Close[i-1] - stkHist$Stock.ShortTerm.MA[i-1])*10/stkHist$Stock.Close[i-1]
# if((stkHist$Stock.Open[i] >= 1.03*stkHist$Stock.ShortTerm.MA[i-1]))
# {
#   stkHist$trend.factor[i] <<- 0.3
# }
# else if ((stkHist$Stock.Open[i] < 0.97*stkHist$Stock.ShortTerm.MA[i-1]))
# {
#   stkHist$trend.factor[i] <<- -0.3
# }
#
# else
# {
#   stkHist$trend.factor[i] <<- 0
#
# }
# if(stkHist$Stock.SD[i-1] > .04) {stkHist$tooVolatile[i] <<- TRUE}
stkHist$trend.factor[i] <<- ((stkHist$Stock.Close[i-1]/stkHist$Stock.ShortTerm.MA[i-1]) - 1) * 10
# Stock Opens GREEN -> Take Long position on the Stock and (Optional) Set floor and/or Ceiling
# if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.ClOp[i]*100 <= long.threshold) && (stkHist$Stock.ClOp[i]*100 >= -stkHist$trend.factor[i]))
#  if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.ClOp[i]*100 <= long.threshold) && (stkHist$Stock.Open[i] >= stkHist$Stock.ShortTerm.MA[i-1]))
#     if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.ClOp[i]*100 <= long.threshold) && (stkHist$Stock.Open[i] >= 1.03*stkHist$Stock.ShortTerm.MA[i-1]))
if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.SD[i-1] <= .04) && (stkHist$Stock.ClOp[i]*100 <= long.threshold) && (stkHist$Stock.ShortTerm.MA[i-1]  >= 1.005*stkHist$Stock.LongTerm.MA[i-1]))
#       if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.ClOp[i]*100 <= long.threshold) && (stkHist$Stock.ShortTerm.MA[i-1]  >= 1.01*stkHist$Stock.LongTerm.MA[i-1])  && (stkHist$Stock.ShortTerm.MA[i-2]  >= 1.01*stkHist$Stock.LongTerm.MA[i-2]))
#    if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.ClOp[i]*100 >= -long.threshold) && (stkHist$Stock.ShortTerm.MA[i-1]  >= 1.01*stkHist$Stock.LongTerm.MA[i-1]))
{
stkHist$TRADE[i] <<- "LONG"
# STOP LOSS (FLOOR)
stkHist$PERCENT.RETURN[i] <<- ifelse(stkHist$Stock.Low[i] < (1-(loss.limit/100)) * stkHist$Stock.Open[i], -loss.limit,(stkHist$Stock.Close[i] - stkHist$Stock.Open[i])*100/stkHist$Stock.Open[i] )
# PRESERVE PROFIT (CEILING)
stkHist$PERCENT.RETURN[i] <<- ifelse((stkHist$Stock.High[i] > (1+(profit.preserve/100)) * stkHist$Stock.Open[i]) & (stkHist$PERCENT.RETURN[i] != -loss.limit), profit.preserve,stkHist$PERCENT.RETURN[i] )
}
# Stock Opens RED -> Short the Stock and (Optional) Set floor and/or Ceiling
# else if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.ClOp[i]*100 >= -short.threshold) && (stkHist$Stock.ClOp[i]*100 < -stkHist$trend.factor[i]))
#  else if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.ClOp[i]*100 >= -short.threshold) && (stkHist$Stock.Open[i] < stkHist$Stock.ShortTerm.MA[i-1]))
#  else if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.ClOp[i]*100 >= -short.threshold) && (stkHist$Stock.Open[i] < 0.97*stkHist$Stock.ShortTerm.MA[i-1]))
else if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.SD[i-1] <= .04) && (stkHist$Stock.ClOp[i]*100 >= -short.threshold) && (stkHist$Stock.ShortTerm.MA[i-1] < 0.995*stkHist$Stock.LongTerm.MA[i-1]))
#     else if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.ClOp[i]*100 >= -short.threshold) && (stkHist$Stock.ShortTerm.MA[i-1] < 0.99*stkHist$Stock.LongTerm.MA[i-1]) && (stkHist$Stock.ShortTerm.MA[i-2] < 0.99*stkHist$Stock.LongTerm.MA[i-2]))
#    else if(!is.na(stkHist$Stock.ClOp[i]) && (stkHist$Stock.ClOp[i]*100 <= short.threshold) && (stkHist$Stock.ShortTerm.MA[i-1] < 0.99*stkHist$Stock.LongTerm.MA[i-1]))
{
stkHist$TRADE[i] <<- "SHORT"
# STOP LOSS
stkHist$PERCENT.RETURN[i] <<- ifelse(stkHist$Stock.High[i] > (1+(loss.limit/100)) * stkHist$Stock.Open[i], -loss.limit,(- stkHist$Stock.Close[i] + stkHist$Stock.Open[i])*100/stkHist$Stock.Close[i] )
# PRESERVE PROFT
stkHist$PERCENT.RETURN[i] <<- ifelse((stkHist$Stock.Low[i] < (1-(profit.preserve/100)) * stkHist$Stock.Open[i]) & (stkHist$PERCENT.RETURN[i] != -loss.limit), profit.preserve,stkHist$PERCENT.RETURN[i] )
}
else
{
stkHist$TRADE[i] <<- "NO TRADE"
stkHist$PERCENT.RETURN[i] <<- 0
}
}
STOCK.MOVE.DURING.PERIOD <<- (stkHist[nrow(stkHist),"Stock.Close"] - stkHist[1,"Stock.Close"])*100/stkHist[1,"Stock.Close"]
STOCK.MOVE.DURING.PERIOD <<- round(STOCK.MOVE.DURING.PERIOD, digits=2)
NOTRADES <<- which(stkHist$TRADE == "NO TRADE")
# stkHist <<- stkHist[-NOTRADES,]
WINNING.LONG.POSITIONS <<- which(stkHist$TRADE == "LONG" & stkHist$PERCENT.RETURN > 0 )
LOSING.LONG.POSITIONS <<- which(stkHist$TRADE == "LONG" & stkHist$PERCENT.RETURN <= 0 )
WINNING.SHORT.POSITIONS <<- which(stkHist$TRADE == "SHORT" & stkHist$PERCENT.RETURN > 0 )
LOSING.SHORT.POSITIONS <<- which(stkHist$TRADE == "SHORT" & stkHist$PERCENT.RETURN <= 0 )
DAY.ANALYSIS <<- ifelse(stkHist[-NOTRADES, "PERCENT.RETURN"] > 0 , "POS", "NEG")
TOTAL.PERCENT.MOVE <<- sum(stkHist[-NOTRADES, "PERCENT.RETURN"], na.rm = T )
TOTAL.PERCENT.MOVE <<- round(TOTAL.PERCENT.MOVE, digits=2)
fileConn<-file("output.txt","a")
writeLines(paste0("STOCK:",tkrsym), con = fileConn, sep = "\n")
writeLines(paste("BETWEEN TIME RANGE:",frdate,"AND",todate), con = fileConn, sep = "\n")
writeLines(paste0("LONG THRESHOLD:",long.threshold,"%"), con = fileConn, sep = "\n")
writeLines(paste0("SHORT THRESHOLD:",short.threshold,"%"), con = fileConn, sep = "\n")
writeLines(paste0("STOP LOSS:",loss.limit,"%"), con = fileConn, sep = "\n")
writeLines(paste0("PROFIT PRESERVE:",profit.preserve,"%"), con = fileConn, sep = "\n")
writeLines(paste0("POSITIVE RETURN DAYS:",sum(DAY.ANALYSIS == "POS",na.rm=T)), con = fileConn, sep = "\n")
writeLines(paste0("NEGATIVE RETURN DAYS:",sum(DAY.ANALYSIS == "NEG",na.rm=T)), con = fileConn, sep = "\n")
writeLines(paste0("NO TRADE DAYS:",length(NOTRADES)), con = fileConn, sep = "\n")
writeLines(paste0("LONG POSITIONS (WIN /LOSS):",length(WINNING.LONG.POSITIONS),"/",length(LOSING.LONG.POSITIONS)), con = fileConn, sep = "\n")
writeLines(paste0("SHORT POSITIONS (WIN /LOSS):",length(WINNING.SHORT.POSITIONS),"/",length(LOSING.SHORT.POSITIONS)), con = fileConn, sep = "\n")
writeLines(paste0("TOTAL PROFIT/LOSS DURING PERIOD WITH THIS STRATEGY:",TOTAL.PERCENT.MOVE,"%"), con = fileConn, sep = "\n")
writeLines(paste0("STOCK MOVE DURING PERIOD:",STOCK.MOVE.DURING.PERIOD,"%"), con = fileConn, sep = "\n\n")
close(fileConn)
}
open_price_trade_basket <- function(tickers, from.date = "2008-01-01", to.date = Sys.Date(), lt=1, st =1, ll =3,pp =1 )
{
tknum <- length(tickers)
if (tknum < 1)
{
stop ('Please pass at least 1 stock ticker for analysis.')
}
for( t in 1:tknum)
{
tkr <- tickers[t]
open_price_day_trade_analysis(tkr,from.date, to.date,lt,st,ll,pp )
}
}
ClOp <-
function(x)
{
xx <- Delt(Lag(Cl(x)),Op(x))
colnames(xx) <- paste("ClOp", deparse(substitute(x)), sep='.')
xx
}
open_price_trade_basket("BAC", from.date="2015-01-01", to.date="2016-08-25",lt=19, st=19,ll=15,pp=15)
getwd()
setwd("/stockanalysis")
setwd("./stockanalysis")
open_price_trade_basket("BAC", from.date="2015-01-01", to.date="2016-08-25",lt=19, st=19,ll=15,pp=15)
open_price_trade_basket(c("BAC", "USO","INTC","TXN","FB","PFE"), from.date="2015-01-01", to.date="2016-08-25",lt=5, st=5,ll=3,pp=15)
open_price_trade_basket(c("BAC", "USO","INTC","FB","TXN"), from.date="2015-01-01", to.date="2016-08-25",lt=5, st=5,ll=3,pp=15)
open_price_trade_basket(c("BAC", "USO","INTC","FB","TXN"), from.date="2015-01-01", to.date="2016-08-25",lt=10, st=10,ll=3,pp=15)
---
